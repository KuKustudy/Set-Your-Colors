{"ast":null,"code":"var _jsxFileName = \"/Users/wingyeehe/Documents/Unimelb files/undergrad year 3/Local projects/background_color_picker/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport { useState } from 'react';\nimport './App.css';\n\n/*\nThe BackgroundColorInputForm function takes a variable textColor, and a function\nsetBackgroundColor as input.\nThis function renders an input form and a submit button on the page.\nUser can input a color (in hex code), click the submit and can see the change \nof the background color of the page.\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BackgroundColorInputForm({\n  textColor,\n  setBackgroundColor\n}) {\n  _s();\n  //define a variable and function that stores input and reacts to the input\n  const [color, setColor] = useState('');\n\n  // when user has click the submit button , this function will be triggered\n  const handleSubmit = event => {\n    // preventthe form from resetting itself\n    event.preventDefault();\n\n    // set the Backgroundcolor function to update the background color\n    setBackgroundColor(color);\n    alert(`The backgroundColor you picked is: ${color}`);\n  };\n\n  // when user change text in the textbox, update the color variable\n  const handleInputChange = event => {\n    setColor(event.target.value);\n  };\n\n  //below is html code, it renders a input form and submit button\n  return (\n    /*#__PURE__*/\n    /* submission event should be handled by form, in here, submission event is\n       detected when user clicks a button of type=\"submit\", and then 'onSubmit'\n       event is handled in the 'handleSubmit' function\n    */\n    _jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        style: {\n          color: textColor\n        },\n        children: [\"set your background color (Enter HEX code): \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 87\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: color\n          /* whenever event occurs, that is when the input in the form changed, \n           update the color variable with the input input in the form. \n           And e.targer.value represents input in the form */,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(BackgroundColorInputForm, \"5SCJp6l3vLBveqZVPs7KjXxIMCY=\");\n_c = BackgroundColorInputForm;\nfunction TextColorInputForm({\n  textColor,\n  setTextColor\n}) {\n  _s2();\n  //define a variable and function that stores input and reacts to the input\n  const [color, setColor] = useState('');\n  const handleSubmit = event => {\n    // when user has click the submit button , this function will be triggered; use `` not ''\n    // preventthe form from resetting itself\n    event.preventDefault();\n    setTextColor(color);\n    alert(`The text color you picked is: ${color}`);\n  };\n  const handleInputChange = event => {\n    setColor(event.target.value);\n  };\n  return (\n    /*#__PURE__*/\n    /* submission event should be handled by form, in here, submission event is detected\n       when user clicks a button of type=\"submit\", and then 'onSubmit' event is\n       handled in the 'handleSubmit' function\n    */\n    _jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        style: {\n          color: textColor\n        },\n        children: [\"set your text color (Enter HEX code): \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 81\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: color\n          /* whenever event occurs, that is when the input in the form changed, \n           update the color variable with the input input in the form. \n           And e.targer.value represents input in the form */,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s2(TextColorInputForm, \"5SCJp6l3vLBveqZVPs7KjXxIMCY=\");\n_c2 = TextColorInputForm;\nfunction App() {\n  _s3();\n  const [backgroundColor, setBackgroundColor] = useState('');\n  const [textColor, setTextColor] = useState('');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"root\",\n    className: \"App\",\n    style: {\n      backgroundColor: backgroundColor\n    },\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          color: textColor\n        },\n        children: \" This is a background and text color picker \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BackgroundColorInputForm, {\n        textColor: textColor,\n        setBackgroundColor: setBackgroundColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextColorInputForm, {\n        textColor: textColor,\n        setTextColor: setTextColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n}\n_s3(App, \"zU3D0+jkIjzolbh3DvRsiqrA7Gs=\");\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"BackgroundColorInputForm\");\n$RefreshReg$(_c2, \"TextColorInputForm\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","BackgroundColorInputForm","textColor","setBackgroundColor","_s","color","setColor","handleSubmit","event","preventDefault","alert","handleInputChange","target","value","onSubmit","children","style","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","_c","TextColorInputForm","setTextColor","_s2","_c2","App","_s3","backgroundColor","id","className","_c3","$RefreshReg$"],"sources":["/Users/wingyeehe/Documents/Unimelb files/undergrad year 3/Local projects/background_color_picker/src/App.js"],"sourcesContent":["import { useState } from 'react';\nimport './App.css';\n\n\n/*\nThe BackgroundColorInputForm function takes a variable textColor, and a function\nsetBackgroundColor as input.\nThis function renders an input form and a submit button on the page.\nUser can input a color (in hex code), click the submit and can see the change \nof the background color of the page.\n*/\nfunction BackgroundColorInputForm({ textColor, setBackgroundColor }) {\n\n  //define a variable and function that stores input and reacts to the input\n  const [color, setColor] = useState('');\n\n  // when user has click the submit button , this function will be triggered\n  const handleSubmit = (event) => {\n    // preventthe form from resetting itself\n    event.preventDefault();\n\n    // set the Backgroundcolor function to update the background color\n    setBackgroundColor(color);\n    alert(`The backgroundColor you picked is: ${color}`);\n  };\n\n  // when user change text in the textbox, update the color variable\n  const handleInputChange = (event) => {\n    setColor(event.target.value);\n  };\n\n\n  //below is html code, it renders a input form and submit button\n  return (\n\n    /* submission event should be handled by form, in here, submission event is\n       detected when user clicks a button of type=\"submit\", and then 'onSubmit'\n       event is handled in the 'handleSubmit' function\n    */\n    <form onSubmit = {handleSubmit}>\n      <label style={{ color: textColor }}>set your background color (Enter HEX code): <br/>\n        <input \n          type=\"text\"\n          value={color}\n          /* whenever event occurs, that is when the input in the form changed, \n           update the color variable with the input input in the form. \n           And e.targer.value represents input in the form */\n          onChange={handleInputChange}\n        />\n      </label>\n\n      {/* the button should response to change of input */}\n      <button\n        type=\"submit\"\n      >\n      submit\n      </button>\n    </form>\n\n  )\n} \n\n\nfunction TextColorInputForm({ textColor, setTextColor }) {\n  //define a variable and function that stores input and reacts to the input\n  const [color, setColor] = useState('');\n\n  const handleSubmit = (event) => {\n    // when user has click the submit button , this function will be triggered; use `` not ''\n    // preventthe form from resetting itself\n    event.preventDefault();\n    setTextColor(color);\n    alert(`The text color you picked is: ${color}`);\n\n  };\n\n  const handleInputChange = (event) => {\n    setColor(event.target.value);\n  };\n\n\n  return (\n\n    /* submission event should be handled by form, in here, submission event is detected\n       when user clicks a button of type=\"submit\", and then 'onSubmit' event is\n       handled in the 'handleSubmit' function\n    */\n    <form onSubmit = {handleSubmit}>\n      <label style={{ color: textColor }}>set your text color (Enter HEX code): <br/>\n        <input \n          type=\"text\"\n          value={color}\n          /* whenever event occurs, that is when the input in the form changed, \n           update the color variable with the input input in the form. \n           And e.targer.value represents input in the form */\n          onChange={handleInputChange}\n        />\n      </label>\n\n      {/* the button should response to change of input */}\n      <button\n        type=\"submit\"\n      >\n      submit\n      </button>\n    </form>\n\n  )\n} \n\nfunction App() {\n  const [backgroundColor, setBackgroundColor] = useState('');\n  const [textColor, setTextColor] = useState('');\n\n  return (\n    <div id = \"root\" className=\"App\" style={ { backgroundColor: backgroundColor } }>\n      <header className=\"App-header\">\n        <h1 style={{ color: textColor }}> This is a background and text color picker </h1>\n        <BackgroundColorInputForm textColor={textColor} setBackgroundColor={setBackgroundColor} />\n        <br/>\n        <TextColorInputForm textColor={textColor} setTextColor={setTextColor} />\n\n      </header>\n      \n    </div>\n    \n  );\n}\n\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}